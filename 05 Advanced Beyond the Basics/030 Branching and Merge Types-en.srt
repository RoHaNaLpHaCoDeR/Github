1
00:00:00,000 --> 00:00:04,933
Branching and merging are important concepts in Git.

2
00:00:04,933 --> 00:00:09,800
Git makes doing both branching and merging a lot easier than previous tools,

3
00:00:09,800 --> 00:00:12,566
and thus, many workflows rely upon them.

4
00:00:12,566 --> 00:00:16,633
As discussed before, a branch is just a timeline of commits.

5
00:00:16,633 --> 00:00:21,866
More accurately, branches are the names or labels we give timelines in Git.

6
00:00:21,866 --> 00:00:26,066
We can create and delete branches without affecting timelines;

7
00:00:26,066 --> 00:00:31,000
all we are doing is creating or deleting labels of commit rages in Git.

8
00:00:31,000 --> 00:00:35,200
So far, we have been working on the default master branch.

9
00:00:35,200 --> 00:00:41,200
Now, we can create a new branch to do a bit of work, and then rejoin the master branch

10
00:00:41,200 --> 00:00:45,166
by merging in any changes that occurred on the new branch.

11
00:00:45,166 --> 00:00:49,666
While merging, Git tries it's best to automatically merge when possible,

12
00:00:49,666 --> 00:00:54,000
which leads to several types of merge scenarios possible.

13
00:00:54,000 --> 00:00:59,166
First, the fast-forward merge; this happens in the simplest of cases,

14
00:00:59,166 --> 00:01:04,833
when no additional work has been detected on the parent branch, or in our case master.

15
00:01:04,833 --> 00:01:10,633
Git will simply apply all commits from the other branch directly onto the parent branch,

16
00:01:10,633 --> 00:01:13,133
as if we never branched off to begin with.

17
00:01:13,133 --> 00:01:18,966
Of course, we can disable the fast-forward merges if they are undesired for some reason.

18
00:01:18,966 --> 00:01:23,033
Secondly, automatic merges; this happens when Git detects

19
00:01:23,033 --> 00:01:26,533
non-conflicting changes in the parent branch.

20
00:01:26,533 --> 00:01:30,333
Git is able to automatically resolve any conflicts.

21
00:01:30,333 --> 00:01:35,533
In doing so, the old branch's timeline is preserved, and a new merge commit

22
00:01:35,533 --> 00:01:41,066
is created to show the merging of the two branches. Thirdly, manual merge;

23
00:01:41,066 --> 00:01:45,800
this happens when Git is unable to automatically resolve any conflicts.

24
00:01:45,800 --> 00:01:49,933
Git enters a special conflicting merge state, which means that

25
00:01:49,933 --> 00:01:54,900
all merge conflicts must be resolved prior to moving forward with a commit.

26
00:01:54,900 --> 00:02:02,000
Once all conflicts have been resolved, those changes are saved as a merge commit.

