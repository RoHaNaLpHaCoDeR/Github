1
00:00:00,000 --> 00:00:04,200
Welcome, in this video, we're going to create and manage branches

2
00:00:04,200 --> 00:00:11,566
other than master in our Git repository. I'm currently in the "demo" Git repository;

3
00:00:11,566 --> 00:00:16,933
and, from a previous video, we have a modified "README.md" file.

4
00:00:16,933 --> 00:00:22,800
And that's ok; maybe we intended that this file should be modified experimentally,

5
00:00:22,800 --> 00:00:25,466
or as part of a feature of a next update.

6
00:00:25,466 --> 00:00:28,866
Either way, we can use feature or topic branches

7
00:00:28,866 --> 00:00:34,033
in order to separate out changes that we want to make off of master.

8
00:00:34,033 --> 00:00:39,233
If we use the "git branch" command, we can see that we have a single branch named master.

9
00:00:39,233 --> 00:00:42,733
And, right now, it's highlighted green, and with an asterisk,

10
00:00:42,733 --> 00:00:45,333
which denotes that that's the current branch.

11
00:00:45,333 --> 00:00:49,266
Now, I could create another branch by using the "branch" command

12
00:00:49,266 --> 00:00:53,900
and then separately switching to that branch, but I can accomplish both

13
00:00:53,900 --> 00:00:58,866
by using the checkout command with a "-b" option.

14
00:00:58,866 --> 00:01:04,300
Type "git checkout -b", for creating the branch; space;

15
00:01:04,300 --> 00:01:08,033
and then the name of the branch you wish to create and switch to,

16
00:01:08,033 --> 00:01:11,000
I'm calling it "updates"; then press enter.

17
00:01:11,000 --> 00:01:15,966
Now, a couple things have happened. One: it created a new branch called "updates",

18
00:01:15,966 --> 00:01:20,700
then it switched to that new branch and, since there were modifications

19
00:01:20,700 --> 00:01:26,566
pending in the working directory, it carried those modifications forward into that new branch.

20
00:01:26,566 --> 00:01:30,400
This is a technique you can use when you start working on master,

21
00:01:30,400 --> 00:01:35,366
and you decide later that, before committing, that these changes really should be isolated

22
00:01:35,366 --> 00:01:40,900
into their own feature or topic branch. Alright, let's continue;

23
00:01:40,900 --> 00:01:43,800
and, we see that we have "Just some updates",

24
00:01:43,800 --> 00:01:47,300
and I'm going to add "on a branch"; save and close.

25
00:01:47,300 --> 00:01:51,933
Back at the terminal, we're going to add those changes.

26
00:01:51,933 --> 00:01:56,533
And now, let's commit: "Adding updates from branch".

27
00:01:56,533 --> 00:02:01,300
Great, so if I do a "git status", it shows that I'm on branch "updates",

28
00:02:01,300 --> 00:02:04,366
and I'm in a clean working directory with nothing to commit.

29
00:02:04,366 --> 00:02:08,333
If I do a "git hist". Something that should be noted, we have the latest commit,

30
00:02:08,333 --> 00:02:12,100
which is on head and updates, but if we go one back,

31
00:02:12,100 --> 00:02:15,866
we see that is the commit that "master" is associated with.

32
00:02:15,866 --> 00:02:20,333
We can see what the changes are by using our "diff" command.

33
00:02:20,333 --> 00:02:25,733
And, the "diff" command will allow us to pass in the names of branches instead of commit IDs.

34
00:02:25,733 --> 00:02:31,666
So, I'm using "git diff updates master", and it shows us what's different.

35
00:02:31,666 --> 00:02:36,966
Alright, let's say that I'm finished with whatever updates I needed on the "updates" branch.

36
00:02:36,966 --> 00:02:40,033
In order to integrate any changes on my branch,

37
00:02:40,033 --> 00:02:46,333
I need to first switch to my parent branch, which is master.

38
00:02:46,333 --> 00:02:49,800
In order to switch branches, we use the checkout command

39
00:02:49,800 --> 00:02:54,900
"git checkout", branch name; in this case "master", and press enter.

40
00:02:54,900 --> 00:02:59,866
Great; now let's look at our history from the master perspective.

41
00:02:59,866 --> 00:03:03,366
Again, it shows that HEAD is now on "master",

42
00:03:03,366 --> 00:03:07,533
since head typically means the last commit on the current branch.

43
00:03:07,533 --> 00:03:13,333
And, since the current branch is "master", HEAD and "master" are sharing the same commit id.

44
00:03:13,333 --> 00:03:19,533
Since our "hist" command specifies the "--all" parameter to our log command,

45
00:03:19,533 --> 00:03:24,000
we also notice the commit id associated with the "updates" branch.

46
00:03:24,000 --> 00:03:28,766
Well, let's go ahead and merge in those changes. Type "git merge"; space;

47
00:03:28,766 --> 00:03:34,266
and then the name of the branch you wish to merge into the current branch,

48
00:03:34,266 --> 00:03:38,533
then press enter. For this merge, it's such a simple merge

49
00:03:38,533 --> 00:03:41,533
that it's able to do something called a fast-forward,

50
00:03:41,533 --> 00:03:44,833
which means that we're going to pretend that you never really

51
00:03:44,833 --> 00:03:48,600
switched away from "master" in order to make those updates.

52
00:03:48,600 --> 00:03:53,933
So, we're going to apply those commits directly to the master branch.

53
00:03:53,933 --> 00:03:58,600
Now, if we do a "git hist", we see that HEAD, "updates", and "master",

54
00:03:58,600 --> 00:04:03,533
all point to the same commit id; that's the effect of a fast-forward merge.

55
00:04:03,533 --> 00:04:06,966
There are options to disable fast-forward merges from happening,

56
00:04:06,966 --> 00:04:11,766
even though they may be possible, but most of the time, you'll want this behavior.

57
00:04:11,766 --> 00:04:17,166
Once we have completed merging in our changes, we no longer need the updates branch.

58
00:04:17,166 --> 00:04:21,400
Effectively, branches in Git are just labels of timelines

59
00:04:21,400 --> 00:04:26,433
and, once they've been integrated into the main timeline, there's no need for them anymore.

60
00:04:26,433 --> 00:04:31,000
Let's use the "git branch" command: "git branch -d", for delete;

61
00:04:31,000 --> 00:04:33,600
followed by the name of the branch that we wish to delete,

62
00:04:33,600 --> 00:04:36,766
in this case, "updates"; press enter.

63
00:04:36,766 --> 00:04:39,933
Great, we've deleted that branch;

64
00:04:39,933 --> 00:04:43,266
we're back to just the "master" branch.

65
00:04:43,266 --> 00:04:46,500
We do a "git hist"; we see we no longer have

66
00:04:46,500 --> 00:04:50,333
the "updates" branch associated with that commit id.

67
00:04:50,333 --> 00:04:56,200
Note: the history didn't go away, just the label, "updates", did.

