1
00:00:00,000 --> 00:00:05,033
I used Windows 10 for the installation process, but the general process should work

2
00:00:05,033 --> 00:00:08,633
with any modern version of Windows with a few tweaks.

3
00:00:08,633 --> 00:00:15,133
For Windows, we will install Git for Windows, Notepad++, and finally P4Merge.

4
00:00:15,133 --> 00:00:23,866
To install Git on Windows, go to the main Git website at "http://git-scm.com";

5
00:00:23,866 --> 00:00:30,500
that's "g-i-t-scm.com". Once that page loads, it should detect that you are running

6
00:00:30,500 --> 00:00:35,200
Windows, and provide the download for Windows button prominantley displayed

7
00:00:35,200 --> 00:00:39,866
on the home page. Just click that button to begin the download of the Git for Windows

8
00:00:39,866 --> 00:00:45,366
installer. Once the installer has completed downloading, run the installer to start setup.

9
00:00:45,366 --> 00:00:50,666
While it is safe to blast through the setup process by accepting all the defaults,

10
00:00:50,666 --> 00:00:56,866
I do like adding the Git icon to the desktop for easy acces, and allowing Git to run

11
00:00:56,866 --> 00:01:01,266
from within the standard Windows command prompt, allthough we'll be sticking with

12
00:01:01,266 --> 00:01:07,066
Git Bash for this course. Another tweak I like to make is to checkout as-is

13
00:01:07,066 --> 00:01:12,433
and commit as Unix-style. But, that is a purely personal choice, since I do a lot of

14
00:01:12,433 --> 00:01:17,466
cross-platform development. Either way, that and many other settings can be changed

15
00:01:17,466 --> 00:01:22,066
after the installation. Again, most of these choices are personal prefences,

16
00:01:22,066 --> 00:01:27,100
and will not impact this course. Beyond that, just move through the installer,

17
00:01:27,100 --> 00:01:32,600
accepting all the defaults. Before moving on, I like to set up the minimal configuration

18
00:01:32,600 --> 00:01:37,433
required for any signifigant work in Git; Git needs your name and email address

19
00:01:37,433 --> 00:01:42,566
before we can do very much with it. So, let's set that up now; fire up Git Bash,

20
00:01:42,566 --> 00:01:46,900
which is a bash terminal, specifically designed well to work with Git, but it

21
00:01:46,900 --> 00:01:52,666
also has uses beyond Git as well. With Git-Bash open, type the following commands

22
00:01:52,666 --> 00:02:02,966
"git", that's "g-i-t"; space;  "config --global user.name"; sapce;

23
00:02:02,966 --> 00:02:07,900
and then, in double quotes, type your name, then press enter. Next type:

24
00:02:07,900 --> 00:02:17,400
"git config --global user.email"; space; and then, in double quotes,

25
00:02:17,400 --> 00:02:21,333
specify your email address. Once you've done that, press enter.

26
00:02:21,333 --> 00:02:26,733
Now, with Git installed and configured, we can proceed installing a decent text editor.

27
00:02:26,733 --> 00:02:31,400
While technically an optional step, the default text editor for Windows

28
00:02:31,400 --> 00:02:36,700
is the rather limited Notepad. Also, the default editor for Git on Windows

29
00:02:36,700 --> 00:02:41,633
Is a version of the command line centric Vi editor that comes with Git Bash.

30
00:02:41,633 --> 00:02:47,366
Personally, I'm not a fan of either; instead, I like to use Notepad++ on Windows,

31
00:02:47,366 --> 00:02:51,400
and, it can be setup to be the default editor for Git as well.

32
00:02:51,400 --> 00:02:55,933
To start, download the installer for Notepad++ from their website

33
00:02:55,933 --> 00:03:02,800
at "http://Notepad-Plus-Plus.org"; I use the standard Notepad++ installer.

34
00:03:02,800 --> 00:03:07,333
Once the installer has downloaded, run the installer. The only change I make

35
00:03:07,333 --> 00:03:12,233
from the installer defaults, I like the installer to create a shortcut on my desktop,

36
00:03:12,233 --> 00:03:17,800
but that's it; default all the way beyond that. Next, we need to allow Notepad++

37
00:03:17,800 --> 00:03:21,966
to be executed from anywhere on our system; particularly from our

38
00:03:21,966 --> 00:03:27,166
command line environments, like Git Bash. To do that, add the full folder path

39
00:03:27,166 --> 00:03:32,866
that contains the Notepad++ executable to your system's path environment variable.

40
00:03:32,866 --> 00:03:37,066
Don't forget, separate the paths that are already there with a semicolon.

41
00:03:37,066 --> 00:03:43,000
If Git Bash is open, close it, then re-open it. Now, let's create a Bash alias

42
00:03:43,000 --> 00:03:48,400
to provide a custom, short command for Notepad++. Create or open your

43
00:03:48,400 --> 00:03:57,533
".bash_profile" file by typing "notepad++ ~/.bash_profile", then press enter.

44
00:03:57,533 --> 00:04:05,033
Within that file, add a line like this: "alias npp", or any command you want to use; "=";

45
00:04:05,033 --> 00:04:14,333
then, in single quotes 'notepad++ -multi', all lower case; capital 'I'; lowercase 'nst';

46
00:04:14,333 --> 00:04:20,966
space; "-"; then the word "nosession" run together in all lowercase. That's it;

47
00:04:20,966 --> 00:04:25,900
save the file, and then restart Git Bash to try out you new command. By the way,

48
00:04:25,900 --> 00:04:30,066
this works with newer versions of Git for Windows; older versions use the

49
00:04:30,066 --> 00:04:36,033
".bashrc" file instead. Now that we have "notepad++" installed, and accessible

50
00:04:36,033 --> 00:04:41,700
from within Git Bash, let's make Notepad++ the default editor for Git.

51
00:04:41,700 --> 00:04:51,166
We can do that with Git's config command: type "git config --global core.editor";

52
00:04:51,166 --> 00:04:57,633
space; and then, within double quotes, the command "notepad++"; space; "multi",

53
00:04:57,633 --> 00:05:05,900
in all lowercase; capital 'I'; lowercase "nst"; space; "-nosession", all one word,

54
00:05:05,900 --> 00:05:11,100
all lowercase. Press enter; now that we've done that, let's test it out by asking Git

55
00:05:11,100 --> 00:05:16,000
to open its own config file, with the default editor, using this command:

56
00:05:16,000 --> 00:05:26,200
"git config --global -e". Press enter; if Notepad++ loads the global config file,

57
00:05:26,200 --> 00:05:28,800
then your Git integration was successful.

58
00:05:28,800 --> 00:05:34,666
Finally, the last tool for this installation section is P4Merge for Windows,

59
00:05:34,666 --> 00:05:40,633
which is a visual comparison and merge resolution tool that integrates very well with Git.

60
00:05:40,633 --> 00:05:44,233
Technically, we don't need to do this until we get to the part of the course

61
00:05:44,233 --> 00:05:46,433
regarding comparing, branching, and merging,

62
00:05:46,433 --> 00:05:51,500
and only if you want to use a graphical tool for comparing and resolving conflicts.

63
00:05:51,500 --> 00:05:57,666
To start off, go to Perforce's website at "perforce.com", then click the downloads page.

64
00:05:57,666 --> 00:06:00,900
Fair warning, Perforce frequently updates their site,

65
00:06:00,900 --> 00:06:06,200
so the exact path to their download page, and the P4Merge installer may change.

66
00:06:06,200 --> 00:06:09,533
Once on the downloads page, go to the Helix clients,

67
00:06:09,533 --> 00:06:14,066
and find "P4Merge: Visual Mergetool" or something similar to that.

68
00:06:14,066 --> 00:06:17,166
Choose the correct installer that best matches your system,

69
00:06:17,166 --> 00:06:21,400
and then click the download button; If prompted, you may skip the registration,

70
00:06:21,400 --> 00:06:25,266
which should start the download of the actual installer for P4Merge.

71
00:06:25,266 --> 00:06:30,366
Once downloaded, run the installer. The first window will prompt for the features to install;

72
00:06:30,366 --> 00:06:36,433
install only the visual merge tool, and change the other items to not to install.

73
00:06:36,433 --> 00:06:40,333
After that, just follow the prompts through the rest of the install process.

74
00:06:40,333 --> 00:06:43,400
Now, let's integrate P4Merge with Git.

75
00:06:43,400 --> 00:06:46,633
You'll need to know where P4Merge is installed on your system,

76
00:06:46,633 --> 00:06:49,400
which is normally somewhere under "Program Files".

77
00:06:49,400 --> 00:06:54,800
With the next series of commands, you may need to modify them slightly to fit your system.

78
00:06:54,800 --> 00:06:58,900
Let's start by setting up P4Merge as our graphical compare tool.

79
00:06:58,900 --> 00:07:09,233
Within Git Bash, type "git config --global diff.tool p4merge", then press enter.

80
00:07:09,233 --> 00:07:17,966
Now type "git config --global difftool.p4merge.path",

81
00:07:17,966 --> 00:07:22,766
space, and then in double quotes, the path to the P4Merge executable;

82
00:07:22,766 --> 00:07:26,433
note, you'll need to use forward slashes instead of back slashes.

83
00:07:26,433 --> 00:07:29,033
Once you've done that, press enter; and then finally:

84
00:07:29,033 --> 00:07:37,466
"git config --global difftool.prompt false", press enter.

85
00:07:37,466 --> 00:07:41,766
Now, let's configure P4Merge as the graphical mergetool.

86
00:07:41,766 --> 00:07:51,366
Type "git config --global merge.tool p4merge", then press enter.

87
00:07:51,366 --> 00:08:02,933
Next type "git config --global mergetool.p4merge.path", space, and then in double quotes,

88
00:08:02,933 --> 00:08:08,233
the full path to the P4Merge executable, again, using forward slashes.

89
00:08:08,233 --> 00:08:19,200
Finally, type "git config --global mergetool.prompt false", press enter.

90
00:08:19,200 --> 00:08:22,666
The above commands should work, but some systems may require

91
00:08:22,666 --> 00:08:30,633
converting the paths to a Unix friendly version, where "C:" is replaced with "/C/".

92
00:08:30,633 --> 00:08:37,533
If you experience any problems, check out the install instructions in the next lecture.

