1
00:00:00,000 --> 00:00:05,133
I used Yosemite for the installation process, but it should work with later versions.

2
00:00:05,133 --> 00:00:09,000
For Mac OS X, we will install Apple's version of Git

3
00:00:09,000 --> 00:00:16,133
provided by the command line developer tools, TextMate 2, and finally P4Merge.

4
00:00:16,133 --> 00:00:21,466
Installing Git on the Mac has become super simple. Open your terminal program,

5
00:00:21,466 --> 00:00:26,433
and simply type "git", that's "g-i-t"; space; version, then press enter.

6
00:00:26,433 --> 00:00:31,066
If Git responds with a version number, then Git is already installed. Otherwise,

7
00:00:31,066 --> 00:00:34,833
your system will prompt you for whether or not you want to install the command line

8
00:00:34,833 --> 00:00:40,166
developer tools, or Xcode. If you plan to use Xcode, then choose that option;

9
00:00:40,166 --> 00:00:46,100
but, not everyone needs or wants Xcode, and Xcode is a huge download

10
00:00:46,100 --> 00:00:50,733
just for a handful of command line utilities, including Git. I'll assume that you

11
00:00:50,733 --> 00:00:55,366
just want to install the command line developer tools; just follow the install prompts

12
00:00:55,366 --> 00:01:00,200
as needed, and accept any defaults. Once that's done, test it out by typing:

13
00:01:00,200 --> 00:01:04,700
"git version", then press enter. If Git responds with a version number,

14
00:01:04,700 --> 00:01:09,333
then you are good to go. Before moving on, I like to set up the minimal configuration

15
00:01:09,333 --> 00:01:13,800
required for any significant work in Git. Git needs your name and email address

16
00:01:13,800 --> 00:01:17,966
before we can do very much with it, so, let's set that up now; with your terminal

17
00:01:17,966 --> 00:01:27,833
still open, type the following commands "git config --global user.name", space,

18
00:01:27,833 --> 00:01:32,966
and then, in double quotes, specify your name; press enter. Then next type

19
00:01:32,966 --> 00:01:41,900
"git config --global user.email", space, and then in double quotes

20
00:01:41,900 --> 00:01:45,566
specify your email address. Once you've done that, press enter.

21
00:01:45,566 --> 00:01:51,100
Now, with Git installed and configured, we can proceed to installing a decent text editor.

22
00:01:51,100 --> 00:01:57,566
While technically an optional step, the default text editor for Mac OSX is the rather

23
00:01:57,566 --> 00:02:03,933
limited TextEdit. Also, the default editor for Git is the command line centric Vi editor.

24
00:02:03,933 --> 00:02:09,066
Personally, I'm not a fan of either; instead, I like to use TextMate 2, and configure it

25
00:02:09,066 --> 00:02:13,700
to work seamlessly with Git. To start, download the installer for TextMate 2

26
00:02:13,700 --> 00:02:20,066
from their website at "macromates.com". Click on the TextMate 2.0 installer;

27
00:02:20,066 --> 00:02:24,600
don't worry if it says beta, or something like that, it's been very stable for me so far.

28
00:02:24,600 --> 00:02:29,266
You will be given an archive; just expand the archive file, which will contain the

29
00:02:29,266 --> 00:02:34,566
TextMate.app. Drag the TextMate.app into your applications folder, and, that's

30
00:02:34,566 --> 00:02:39,833
basically the install process. Next, open TextMate 2, and then go to preferences,

31
00:02:39,833 --> 00:02:43,533
and install the command line support, which will setup the "mate" command,

32
00:02:43,533 --> 00:02:47,766
that will be available from the terminal. Now that we have TextMate 2 installed,

33
00:02:47,766 --> 00:02:52,733
let's make it our default editor for Git; we do that with Git's "config" command.

34
00:02:52,733 --> 00:03:03,466
Type "git config --global core.editor", space, and then in double quotes the command

35
00:03:03,466 --> 00:03:10,333
"mate -w", now press enter. Now that we've done that, let's test it out by asking Git

36
00:03:10,333 --> 00:03:14,933
to open its own config file, with the default editor, with this command:

37
00:03:14,933 --> 00:03:23,366
"git config --global -e", then press enter. If TextMate loads

38
00:03:23,366 --> 00:03:27,733
the global ".gitconfig" file, then the Git integration was successful.

39
00:03:27,733 --> 00:03:33,066
Finally, the last tool for this installation section is P4Merge for Mac,

40
00:03:33,066 --> 00:03:38,066
which is a visual comparison and merge resolution tool that integrates well with Git.

41
00:03:38,066 --> 00:03:41,566
Technically, we don't need to do this untill we get to the part of the course

42
00:03:41,566 --> 00:03:43,900
regarding comparing, branching, and merging,

43
00:03:43,900 --> 00:03:48,900
and only if you want to use a graphical tool for comparing and resolving conflicts.

44
00:03:48,900 --> 00:03:55,033
To start off, go to Perforce's website at "perforce.com", then click on the downloads page.

45
00:03:55,033 --> 00:03:58,200
Fair warning, Perforce frequently updates their site,

46
00:03:58,200 --> 00:04:03,566
so the exact path to the downloads page and the P4Merge installer may change.

47
00:04:03,566 --> 00:04:07,866
Once on the downloads page, go to the Helix clients, and find

48
00:04:07,866 --> 00:04:11,966
"P4Merge: Visual Merge Tool", or something similar to that.

49
00:04:11,966 --> 00:04:16,033
Choose the correct installer that best matches your operating system,

50
00:04:16,033 --> 00:04:20,466
and then click the download button. If prompted, you may skip the registration,

51
00:04:20,466 --> 00:04:25,166
which then should start the download of the actual installer image for P4Merge.

52
00:04:25,166 --> 00:04:31,800
Once downloaded, run the installer image; only install the P4Merge client and nothing else.

53
00:04:31,800 --> 00:04:36,000
Now, let's integrate P4Merge with Git; you'll need to know where

54
00:04:36,000 --> 00:04:40,666
P4Merge is installed on your system, which is normally under "/Applications".

55
00:04:40,666 --> 00:04:46,000
With the next series of commands, you may need to modify them slightly to fit on your system.

56
00:04:46,000 --> 00:04:50,500
Let's start by setting up P4Merge as our graphical compare tool with Git.

57
00:04:50,500 --> 00:04:59,900
Type "git config --global diff.tool p4merge", press enter.

58
00:04:59,900 --> 00:05:09,533
Then type "git config --global difftool.p4merge.path",

59
00:05:09,533 --> 00:05:15,466
space, then, within double quotes, the full path to the P4Merge executable.

60
00:05:15,466 --> 00:05:19,900
Once you've type that out or pasted it in, double check and then press enter.

61
00:05:19,900 --> 00:05:29,933
Finally, type "git config --global difftool.prompt false", then press enter.

62
00:05:29,933 --> 00:05:33,666
Now, let's configure P4Merge as the graphical mergetool;

63
00:05:33,666 --> 00:05:43,633
type "git config --global merge.tool p4merge", press enter.

64
00:05:43,633 --> 00:05:53,466
Then, next, type "git config --global mergetool.p4merge.path",

65
00:05:53,466 --> 00:05:58,633
space, and then in double quotes, the full path to the P4Merge executable.

66
00:05:58,633 --> 00:06:01,100
Double check that, and then press enter.

67
00:06:01,100 --> 00:06:12,100
Finally, type "git config --global mergetool.prompt false", then press enter.

68
00:06:12,100 --> 00:06:18,733
If you experience any problems, check out the install instructions in the next lecture.

