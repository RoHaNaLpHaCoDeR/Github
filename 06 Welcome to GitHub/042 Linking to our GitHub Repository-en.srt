1
00:00:00,000 --> 00:00:03,500
Welcome, in this video, we're going to link our newly created

2
00:00:03,500 --> 00:00:07,066
GitHub repository with our local Git repository.

3
00:00:07,066 --> 00:00:12,533
In a previous video, we just created an empty Git repository on the GitHub website.

4
00:00:12,533 --> 00:00:16,900
In doing so, we landed on this page, giving us instructions on how to link

5
00:00:16,900 --> 00:00:20,066
the GitHub repository with our Git repository.

6
00:00:20,066 --> 00:00:23,833
To do so, we're going to go down and see the instructions to push an existing

7
00:00:23,833 --> 00:00:27,133
repository from the command line. It gives us two commands;

8
00:00:27,133 --> 00:00:30,566
one is a Git remote command, and the other is a Git push command.

9
00:00:30,566 --> 00:00:34,233
Let's copy the first line, which is control+c or command+c,

10
00:00:34,233 --> 00:00:37,833
and now let's return to the terminal. I'm currently in my user's home directory.

11
00:00:37,833 --> 00:00:41,033
So, I need to navigate to our "demo" Git repository.

12
00:00:41,033 --> 00:00:45,233
So, now I'm in the "demo" Git repository, I'm currently on the master branch,

13
00:00:45,233 --> 00:00:49,666
in a clean working directory. The first command tells us to do a "git remote".

14
00:00:49,666 --> 00:00:53,266
The "git remote" command manages all the remote connections

15
00:00:53,266 --> 00:00:56,866
from our current local repository to a remote or

16
00:00:56,866 --> 00:01:01,300
another repository someplace else on the internet. In this case, on GitHub.

17
00:01:01,300 --> 00:01:06,200
If we issue the "git remote -v" command, Git responds without any results,

18
00:01:06,200 --> 00:01:08,700
which means we have no remote connections set.

19
00:01:08,700 --> 00:01:11,600
Now, let's paste in that command from our GitHub web page.

20
00:01:11,600 --> 00:01:15,433
Before I press enter, I like to explain what this command is about to do.

21
00:01:15,433 --> 00:01:19,000
We start off with "git remote", and then a sub-command, "add".

22
00:01:19,000 --> 00:01:21,833
The "add" sub command takes two parameters:

23
00:01:21,833 --> 00:01:24,700
the name of the remote reference we want to create,

24
00:01:24,700 --> 00:01:27,800
in this case, I want to name this reference "origin";

25
00:01:27,800 --> 00:01:32,966
and then, the second parameter is the full URL to the remote repository,

26
00:01:32,966 --> 00:01:36,000
which is the URL to my GitHub repository.

27
00:01:36,000 --> 00:01:40,233
Now, in this case, we could use any name we want to in place of "origin",

28
00:01:40,233 --> 00:01:45,633
but by convention, the first and primary remote repository is named origin.

29
00:01:45,633 --> 00:01:50,066
Again, that's simply a convention. Double check the line, and then press enter.

30
00:01:50,066 --> 00:01:53,600
Now if we do a "git remote -v", Git tells us that we have

31
00:01:53,600 --> 00:01:56,533
"origin" pointing to the GitHub repository.

32
00:01:56,533 --> 00:01:59,933
Now, you might be wondering why we have the entry listed twice,

33
00:01:59,933 --> 00:02:04,400
and that's because, technically, Git will allow to have two different URLs:

34
00:02:04,400 --> 00:02:08,666
one for fetching and one for pushing. We'll get into that a little bit later.

35
00:02:08,666 --> 00:02:13,766
However, 99% of the time, the same URL will be for both entries.

36
00:02:13,766 --> 00:02:18,600
So, don't worry about the fact that this entry is listed twice.

