1
00:00:00,000 --> 00:00:04,266
Welcome, in this video, we're going to rename or move files,

2
00:00:04,266 --> 00:00:09,566
and delete them using Git. I'm currently in the "demo" Git repository,

3
00:00:09,566 --> 00:00:13,833
on master, with nothing to commit since we have a clean working directory.

4
00:00:13,833 --> 00:00:17,266
Well, let's change that; let's create a new file.

5
00:00:17,266 --> 00:00:22,966
I'm going to create a file called "example.txt".

6
00:00:22,966 --> 00:00:30,400
Once I've saved and closed and returned back to the terminal, you see we have a new file.

7
00:00:30,400 --> 00:00:39,566
Now, let's add the file, And, now let's commit: "adding example file".

8
00:00:39,566 --> 00:00:43,866
Currently I have the "example.txt" file in my file system.

9
00:00:43,866 --> 00:00:46,866
What if I decide that I don't like the name of that file?

10
00:00:46,866 --> 00:00:50,300
Well, I can actually change it using the Git commands, and doing so

11
00:00:50,300 --> 00:00:56,266
provides some extra advantages over just changing the file within the operating system.

12
00:00:56,266 --> 00:01:03,900
If I type "git mv" for move, we're going to move the file to its new name.

13
00:01:03,900 --> 00:01:11,466
So, I'm moving it from "example.txt" to "demo.txt", effectively renaming the file.

14
00:01:11,466 --> 00:01:16,866
Press enter; with Git, no news is good news, so let's do a "git status".

15
00:01:16,866 --> 00:01:22,900
Git shows that it's going to rename "example.txt" to "demo.txt",

16
00:01:22,900 --> 00:01:28,233
but this change is actually staged, indicated by "Changes to be committed".

17
00:01:28,233 --> 00:01:32,700
If we do an "ls", we can see that the file has already been renamed

18
00:01:32,700 --> 00:01:39,966
on the operating system. Well, to finish the task, we need to actually commit;

19
00:01:39,966 --> 00:01:44,700
"git commit -m", with the commit message "renaming example".

20
00:01:44,700 --> 00:01:50,366
Great, and within the commit it shows that we renamed the file, "example.txt",

21
00:01:50,366 --> 00:01:56,066
to "demo.txt", with, in parenthesis, a "(100%)" confidence level;

22
00:01:56,066 --> 00:01:59,700
that is, Git thinks that this is exactly the same file.

23
00:01:59,700 --> 00:02:05,066
If we would have made modifications to the "demo.txt" file prior to committing,

24
00:02:05,066 --> 00:02:08,133
then that level would have been lower than 100%.

25
00:02:08,133 --> 00:02:12,000
But, what if we didn't want that file at all? Well, we could remove it.

26
00:02:12,000 --> 00:02:16,433
Instead of removing it using the facilities provided by the operating system,

27
00:02:16,433 --> 00:02:20,933
if we use Git to do the removal, then we get the extra benefit

28
00:02:20,933 --> 00:02:25,233
of Git automatically tracking the deletion.

29
00:02:25,233 --> 00:02:32,600
Doing an "ls", we have our "demo.txt". We type "git rm" for remove,

30
00:02:32,600 --> 00:02:36,566
then our file that we want removed, then we can press enter.

31
00:02:36,566 --> 00:02:40,466
It tells us that the "demo.txt" file has been removed.

32
00:02:40,466 --> 00:02:45,566
If we do an ls, we see that we no longer have our "demo.txt" file;

33
00:02:45,566 --> 00:02:50,800
however, if we do our "git status", we can see that our deletion has only been staged.

34
00:02:50,800 --> 00:02:57,733
To complete the deletion, we need to actually do the commit:

35
00:02:57,733 --> 00:03:03,733
"git commit -m "deleting demo file" ".

36
00:03:03,733 --> 00:03:08,066
Great, we're back to a clean working directory.

