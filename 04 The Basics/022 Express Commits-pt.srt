1
00:00:00,000 --> 00:00:05,033
Neste vdeo, vamos editar um arquivo existente sendo gerenciado pelo Git.

2
00:00:05,033 --> 00:00:09,666
No meu terminal, atualmente estou em nosso repositrio Git "demo".

3
00:00:09,666 --> 00:00:14,400
Se eu fizer um "status git", atualmente temos um diretrio de trabalho limpo, sem nada para confirmar.

4
00:00:14,400 --> 00:00:18,833
Fazer um "ls" mostra que temos uma "LICENA". md "e um" README. md "file.

5
00:00:18,833 --> 00:00:23,866
Vamos atualizar nosso arquivo Leiame; digite "mate README. md ".

6
00:00:23,866 --> 00:00:27,800
Vou adicionar mais texto, salve e feche.

7
00:00:27,800 --> 00:00:31,266
De volta ao terminal, eu vou fazer um "git status", e

8
00:00:31,266 --> 00:00:34,666
agora o Git me diz que eu tenho um arquivo modificado.

9
00:00:34,666 --> 00:00:39,733
Portanto, a diferena  que, em vdeos anteriores, nosso arquivo Leiame no foi controlado e, em

10
00:00:39,733 --> 00:00:43,200
seguida, foi alterado para ser confirmado. Nesse caso, temos

11
00:00:43,200 --> 00:00:48,666
um arquivo modificado que simplesmente diz "Alteraes no preparadas para confirmao".

12
00:00:48,666 --> 00:00:54,833
 assim que o Git rastreia as diferenas entre os arquivos que no so rastreados e os arquivos rastreados.

13
00:00:54,833 --> 00:01:01,200
Para saber quais arquivos o Git est rastreando, podemos usar o comando "git ls files".

14
00:01:01,200 --> 00:01:07,566
O Git me diz que eu tenho dois arquivos sendo rastreados, que  o arquivo de licena e o arquivo Leiame.

15
00:01:07,566 --> 00:01:11,200
Se eu adicionar um novo arquivo usando o comando

16
00:01:11,200 --> 00:01:16,566
"touch", posso ver que o "novo. arquivo "est no meu sistema de arquivos.

17
00:01:16,566 --> 00:01:22,000
O Git v que eu tenho um arquivo no rastreado e a modificao no arquivo Readme.

18
00:01:22,000 --> 00:01:27,700
Fazer "git ls -files" ainda revela que o Git est apenas rastreando a Licena e

19
00:01:27,700 --> 00:01:32,233
o arquivo Leia-me; no o "novo. Arquivo".

20
00:01:32,233 --> 00:01:37,833
Vamos em frente e nos livrar desse arquivo rapidamente: "rm new. arquivo "; esse 

21
00:01:37,833 --> 00:01:40,933
o comando bash remove.

22
00:01:40,933 --> 00:01:44,600
Agora, estou de volta ao simples fato de ter o arquivo Readme alterado.

23
00:01:44,600 --> 00:01:48,266
E a razo pela qual eu passo por isso para mostrar quais

24
00:01:48,266 --> 00:01:53,533
arquivos esto sendo rastreados  que o prximo comando depende de qualquer arquivo rastreado para funcionar; e

25
00:01:53,533 --> 00:01:56,433
isso  algo que eu chamo de "expressar expresso".

26
00:01:56,433 --> 00:02:01,333
E  quando usamos o "git commit", passando o parmetro "-a", o parmetro

27
00:02:01,333 --> 00:02:07,766
"-a" diz ao Git para adicionar primeiro os arquivos modificados  rea de teste do Git e,

28
00:02:07,766 --> 00:02:10,133
em seguida, prosseguir diretamente para o commit.

29
00:02:10,133 --> 00:02:14,766
Podemos realizar isso basicamente com um nico comando com essa opo.

30
00:02:14,766 --> 00:02:19,000
Agora, voc pode estar se perguntando: "Ei, por que estamos adicionando um arquivo modificado? "Bem,  apenas a maneira

31
00:02:19,000 --> 00:02:24,566
que o Git funciona; ento, basicamente, a maneira como vejo isso  que estou

32
00:02:24,566 --> 00:02:29,766
adicionando as modificaes  rea temporria do Git e, em seguida, confirmando essas alteraes.

33
00:02:29,766 --> 00:02:34,300
Vamos continuar, especificando tambm nosso parmetro "-m", que

34
00:02:34,300 --> 00:02:39,133
podemos combinar juntos, em um nico parmetro "-am".

35
00:02:39,133 --> 00:02:45,566
Ento, ns temos "git commit -am", ento space, e ento a mensagem de commit:

36
00:02:45,566 --> 00:02:50,466
"Updating README", ento aperte enter. timo, o commit foi concludo.

37
00:02:50,466 --> 00:02:58,200
Se eu digitar "git log", agora eu tenho dois commits, com o mais recente no topo.

