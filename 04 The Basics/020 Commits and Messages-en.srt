1
00:00:00,000 --> 00:00:03,100
In this video, we're going to continue by adding files

2
00:00:03,100 --> 00:00:07,600
to our freshly recreated demo repository.

3
00:00:07,600 --> 00:00:12,633
As a refresher, we have a single Readme file that is now untracked.

4
00:00:12,633 --> 00:00:17,266
Before we add it, and then continue to committing, let's add another file.

5
00:00:17,266 --> 00:00:22,300
Let's create a file called "LICENSE.md"; I'm going to use my "mate" command,

6
00:00:22,300 --> 00:00:25,933
space, followed by the name of the file, press enter.

7
00:00:25,933 --> 00:00:30,266
I'm just going to put some text in here for now.

8
00:00:30,266 --> 00:00:33,600
Once you've put something in here, then save and then close.

9
00:00:33,600 --> 00:00:36,400
Once back to the terminal, do a "git status",

10
00:00:36,400 --> 00:00:40,733
and now we have both the License and Readme files untracked.

11
00:00:40,733 --> 00:00:44,233
Now, this time, I'm going to add both files at once;

12
00:00:44,233 --> 00:00:49,866
I'm going to use the "git add" command, but instead of specifying a specific file to add

13
00:00:49,866 --> 00:00:54,766
I'm just going to use the wildcard character, period, to indicate that I want

14
00:00:54,766 --> 00:00:59,366
all files in this current folder added to the Git staging area.

15
00:00:59,366 --> 00:01:03,400
Once you've done that, press enter. Now, if we do a "git status",

16
00:01:03,400 --> 00:01:08,400
we can see that both files have been added to the Git staging area.

17
00:01:08,400 --> 00:01:10,633
Let's continue forward with a commit;

18
00:01:10,633 --> 00:01:14,700
however, this time, instead of specifying the "-m" parameter

19
00:01:14,700 --> 00:01:18,600
to add an inline commit message directly on the command prompt,

20
00:01:18,600 --> 00:01:21,300
I'm just going to simply say "git commit".

21
00:01:21,300 --> 00:01:24,966
That will cause the core editor that has been configured with Git

22
00:01:24,966 --> 00:01:28,433
to be used for the commit message; let's press enter.

23
00:01:28,433 --> 00:01:33,733
As I've done previously, I've configured TextMate to be my core editor for Git.

24
00:01:33,733 --> 00:01:39,033
So, now, I can type whatever I want using TextMate as my commit message editor.

25
00:01:39,033 --> 00:01:42,400
For this commit message, it's actually going to be multi-line.

26
00:01:42,400 --> 00:01:47,133
"Adding both a README", "and a LICENSE file to the repo".

27
00:01:47,133 --> 00:01:51,833
Just use your editor's save function; in my case command+s,

28
00:01:51,833 --> 00:01:54,866
then close the editor: command+w.

29
00:01:54,866 --> 00:02:01,000
Then, Git uses whatever you typed in your editor as the commit message.

