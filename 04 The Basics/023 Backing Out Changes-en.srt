1
00:00:00,000 --> 00:00:03,866
Welcome, in this video, we're going to back out some of our changes

2
00:00:03,866 --> 00:00:09,300
by upstaging from our Git staging area, and then finally reverting our changes entirely.

3
00:00:09,300 --> 00:00:13,566
I'm starting off in my terminal, within our "demo" Git repository.

4
00:00:13,566 --> 00:00:17,733
We're on master, with nothing to commit, in a clean working directory.

5
00:00:17,733 --> 00:00:21,100
So, let's get started. I'm going to modify the Readme file again,

6
00:00:21,100 --> 00:00:25,966
and now I'm going to put some random text: "Doing something that should be backed out".

7
00:00:25,966 --> 00:00:33,000
Save and then close; back at the terminal we see that we have our modified Readme file.

8
00:00:33,000 --> 00:00:37,466
I'm going to add that to the Git staging area. If I do a "git status",

9
00:00:37,466 --> 00:00:41,833
we can see that we have our modified file, that has "Changes to be committed".

10
00:00:41,833 --> 00:00:45,733
What if I determine that I really don't want those changes?

11
00:00:45,733 --> 00:00:52,166
Well, what I could do to unstage those changes, is I could use the "git reset" command

12
00:00:52,166 --> 00:00:56,366
as outlined in the "git status" command; so let's do that now.

13
00:00:56,366 --> 00:01:03,600
It tells us to use "git reset", space, and the special pointer "HEAD" in all caps,

14
00:01:03,600 --> 00:01:09,966
space, and then the file to be unstaged: in my case "README.md".

15
00:01:09,966 --> 00:01:16,600
Let's press enter; great, Git responds with saying that the stages have been reset.

16
00:01:16,600 --> 00:01:22,633
If we open up our Readme file, that text is still there; it's just been unstaged.

17
00:01:22,633 --> 00:01:28,166
Back at the terminal, if I do a "git status", it shows that we have our modified file,

18
00:01:28,166 --> 00:01:32,566
but, I don't want any of those changes. To discard those changes entirely,

19
00:01:32,566 --> 00:01:37,633
I want to revert back to the last known good state of that file,

20
00:01:37,633 --> 00:01:39,766
which is back in the Git repository.

21
00:01:39,766 --> 00:01:44,333
To do that, let's follow the instructions provided, which tells us to use

22
00:01:44,333 --> 00:01:55,166
"git checkout --" and then the filename: alright "git checkout -- README.md".

23
00:01:55,166 --> 00:01:58,866
Press enter, and sometimes with Git, no news is good news.

24
00:01:58,866 --> 00:02:01,966
Let's check it out with our "git status" command.

25
00:02:01,966 --> 00:02:07,033
Well, we're back to a clean working directory, what about the contents of that file?

26
00:02:07,033 --> 00:02:12,733
When we open up that file, our changes are gone.

